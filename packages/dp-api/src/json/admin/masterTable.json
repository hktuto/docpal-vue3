{"widgetList":[{"key":62529,"type":"input","icon":"text-field","formItemFlag":true,"options":{"name":"table","label":"tableHeader_name","labelAlign":"","type":"text","defaultValue":"","placeholder":"","columnWidth":"200px","size":"","labelWidth":null,"labelHidden":false,"readonly":false,"disabled":false,"hidden":false,"clearable":true,"showPassword":false,"required":true,"requiredHint":"","validation":"","validationHint":"","customClass":[],"labelIconClass":null,"labelIconPosition":"rear","labelTooltip":null,"minLength":null,"maxLength":61,"showWordLimit":false,"prefixIcon":"","suffixIcon":"","appendButton":false,"appendButtonText":"","appendButtonDisabled":false,"buttonIcon":"custom-search","onCreated":"","onMounted":"","onInput":"","onChange":"","onFocus":"","onBlur":"","onEnter":"","onValidate":"  /* sample code */\n  /*\n  if ((value > 100) || (value < 0)) {\n    callback(new Error('error message'))  //fail\n  } else {\n    callback();  //pass\n  }\n  */\n  const sqlKeys = [\n    'ALL',\n    'AND',\n    'AS',\n    'ASC',\n    'BETWEEN',\n    'BY',\n    'CASE',\n    'DELETE',\n    'DESC',\n    'DISTINCT',\n    'FROM',\n    'GROUP',\n    'HAVING',\n    'IN',\n    'INSERT',\n    'INTO',\n    'IS',\n    'JOIN',\n    'LEFT',\n    'LIKE',\n    'LIMIT',\n    'NOT',\n    'NULL',\n    'OR',\n    'ORDER',\n    'OUTER',\n    'SELECT',\n    'SET',\n    'TABLE',\n    'UPDATE',\n    'VALUES'\n  ]\n  if(sqlKeys.includes(value)) callback(new Error($t('tip.attributeNameFillingRuleDisabled'))) \n  else if(!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(value)) callback(new Error($t('tip.attributeNameFillingRule'))) \n  else callback();","onAppendButtonClick":""},"id":"input23843"},{"key":49694,"type":"divider","icon":"divider","formItemFlag":false,"options":{"name":"paramstext","label":"masterTable.params","columnWidth":"200px","direction":"horizontal","contentPosition":"left","hidden":false,"customClass":["mt-text"],"onCreated":"","onMounted":""},"id":"divider32276"},{"key":47969,"type":"slot","icon":"slot-field","formItemFlag":false,"options":{"name":"defaultFields","label":"defaultFields","hidden":false},"id":"slot112956"},{"key":82786,"type":"sub-form","category":"container","icon":"sub-form","widgetList":[{"key":68000,"type":"switch","icon":"switch-field","formItemFlag":true,"options":{"name":"required","label":"form_isRequire","labelAlign":"","defaultValue":false,"columnWidth":"100px","labelWidth":null,"labelHidden":false,"disabled":false,"hidden":false,"customClass":[],"labelIconClass":null,"labelIconPosition":"rear","labelTooltip":null,"switchWidth":40,"activeText":"","inactiveText":"","activeColor":null,"inactiveColor":null,"onCreated":"","onMounted":"","onChange":"","onValidate":""},"id":"switch86932"},{"key":104235,"type":"switch","icon":"switch-field","formItemFlag":true,"options":{"name":"unique","label":"dpTable_unique","labelAlign":"","defaultValue":false,"columnWidth":"100px","labelWidth":null,"labelHidden":false,"disabled":false,"hidden":false,"customClass":[],"labelIconClass":null,"labelIconPosition":"rear","labelTooltip":null,"switchWidth":40,"activeText":"","inactiveText":"","activeColor":null,"inactiveColor":null,"onCreated":"","onMounted":"","onChange":"","onValidate":""},"id":"switch48854"},{"key":108541,"type":"select","icon":"select-field","formItemFlag":true,"options":{"name":"dataType","label":"docType_type","labelAlign":"","defaultValue":"","placeholder":"","columnWidth":"","size":"","labelWidth":null,"labelHidden":false,"disabled":false,"hidden":false,"clearable":true,"filterable":true,"allowCreate":true,"remote":false,"automaticDropdown":false,"multiple":false,"multipleLimit":0,"optionItems":[],"required":true,"requiredHint":"","validation":"","validationHint":"","customClass":[],"labelIconClass":null,"labelIconPosition":"rear","labelTooltip":null,"onCreated":"","onMounted":"// VARCHAR:64,String    \n// VARCHAR:255,Short Text \n// VARCHAR:4000,Long Text  \n// INTEGER,Number     \n// LOCALDATETIME,Date       \n// Boolean,Boolean \n","onRemoteQuery":"","onChange":"const typeList = this.getOptionItems()\nconst typeItem = typeList.find(item => item.value === value)\nconst fieldsWidget = this.getWidgetRef('fields')\nconst refList = fieldsWidget.refList\nif(!typeItem.unique) {\n  refList[`unique@row${rowId}`].setValue(false)\n  refList[`unique@row${rowId}`].setDisabled(true)\n} else {\n  refList[`unique@row${rowId}`].setDisabled(false)\n}","onFocus":"","onBlur":"","onValidate":""},"id":"select83183"},{"key":112618,"type":"input","icon":"text-field","formItemFlag":true,"options":{"name":"fieldName","label":"dpTable_label","labelAlign":"","type":"text","defaultValue":"","placeholder":"","columnWidth":"","size":"","labelWidth":null,"labelHidden":false,"readonly":false,"disabled":false,"hidden":false,"clearable":true,"showPassword":false,"required":true,"requiredHint":"","validation":"","validationHint":"","customClass":[],"labelIconClass":null,"labelIconPosition":"rear","labelTooltip":null,"minLength":null,"maxLength":64,"showWordLimit":false,"prefixIcon":"","suffixIcon":"","appendButton":false,"appendButtonText":"","appendButtonDisabled":false,"buttonIcon":"custom-search","onCreated":"","onMounted":"","onInput":"","onChange":"","onFocus":"","onBlur":"","onEnter":"","onValidate":"const _this = this  \nif(!value)  return\nconst sqlKeys = [\n    'ALL',\n    'AND',\n    'AS',\n    'ASC',\n    'BETWEEN',\n    'BY',\n    'CASE',\n    'DELETE',\n    'DESC',\n    'DISTINCT',\n    'FROM',\n    'GROUP',\n    'HAVING',\n    'IN',\n    'INSERT',\n    'INTO',\n    'IS',\n    'JOIN',\n    'LEFT',\n    'LIKE',\n    'LIMIT',\n    'NOT',\n    'NULL',\n    'OR',\n    'ORDER',\n    'OUTER',\n    'SELECT',\n    'SET',\n    'TABLE',\n    'UPDATE',\n    'VALUES'\n  ]\nif(sqlKeys.includes(value)) callback(new Error($t('tip.attributeNameFillingRuleDisabled'))) \nif(!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(value)) callback(new Error($t('tip.attributeNameFillingRule'))) \nif (getAllLabel()) {\n  callback();  //pass\n} else {\n  callback(new Error($t('tip.duplicate')))  //fail\n}\n\nfunction getAllLabel () {\n  const labels = []\n  // _this.formModel.extraFields.forEach(item => {\n  // })\n  labels.push('id', 'created_date', 'modified_date', 'modified_by')\n  _this.formModel.fields.forEach(item => {\n    labels.push(item.fieldName)\n  })\n  const index = labels.indexOf(value)\n  labels.splice(index, 1)\n  return labels.indexOf(value) === -1\n}\n","onAppendButtonClick":""},"id":"input61624"}],"options":{"name":"fields","showBlankRow":true,"showRowNumber":true,"labelAlign":"label-left-align","hidden":false,"customClass":["masterTable"],"onSubFormRowAdd":"console.log(newRowId, 'ma')\nconst _this = this\nasync function getDocTypeList() {\n   while(!window.masterTableDataTypeList || window.masterTableDataTypeList.length == 0) {\n    await new Promise(resolve => setTimeout(async () => {\n        resolve()\n    }, 500))\n  }\n  return window.masterTableDataTypeList\n}\nasync function setMetaList() {\n  const docTypeList = await getDocTypeList()\n  _this.refList[`dataType@row${newRowId}`].loadOptions(docTypeList)\n}\nsetMetaList()","onSubFormRowInsert":"console.log(newRowId, 'ins')\nconst _this = this\nasync function getDocTypeList() {\n   while(!window.masterTableDataTypeList || window.masterTableDataTypeList.length == 0) {\n    await new Promise(resolve => setTimeout(async () => {\n        resolve()\n    }, 500))\n  }\n  return window.masterTableDataTypeList\n}\nasync function setMetaList() {\n  const docTypeList = await getDocTypeList()\n  _this.refList[`dataType@row${newRowId}`].loadOptions(docTypeList)\n}\nsetMetaList()","onSubFormRowDelete":"","onSubFormRowChange":""},"id":"subform82936"}],"formConfig":{"modelName":"formData","refName":"vForm","rulesName":"rules","labelWidth":80,"labelPosition":"top","size":"","labelAlign":"label-left-align","cssCode":".masterTable .el-row{\n  display: flex;\n  flex-direction: row-reverse;\n  \n}\n.masterTable .el-row div:nth-of-type(4),\n.masterTable .el-row div:nth-of-type(5) {\n  flex: 1!important;\n}\n.masterTable-extra {\n  /*background-color: red!important;*/\n}\n.masterTable-extra .action-header-column,\n.masterTable-extra .sub-form-action-column{\n  display: none!important;\n}\n \n .masterTable .el-form-item__error {\n  background-color: #fff;\n  z-index: 10;\n }\n \n .mt-text {\n   margin-top: 42px;\n }","customClass":[],"functions":"","layoutType":"PC","jsonVersion":3,"onFormCreated":"","onFormMounted":"const _this = this\nasync function getDocTypeList() {\n  window.masterTableDataTypeList = await $api.get('/docpal/master/tables/dataType/mapping', {}).then(res => res.data.data)\n  return window.masterTableDataTypeList\n}\nasync function setMetaList() {\n  const docTypeList = await getDocTypeList()\n  const fieldsWidget = _this.getWidgetRef('fields')\n  const rowIdData = fieldsWidget.rowIdData\n  const refList = fieldsWidget.refList\n  rowIdData.forEach(item => {\n    refList[`dataType@row${item}`].loadOptions(docTypeList)\n  })\n}\nsetMetaList()","onFormDataChange":"","onFormValidate":"","saveRemoteOptions":"never","labelFormUniqueName":true,"dataSources":[]}}